// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: critique.sql

package db

import (
	"context"
)

const createCritique = `-- name: CreateCritique :one
INSERT INTO critiques (
    owner_id, parent_id, nickname, avatar, content
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, owner_id, parent_id, nickname, avatar, content, created_at
`

type CreateCritiqueParams struct {
	OwnerID  int64  `json:"owner_id"`
	ParentID int64  `json:"parent_id"`
	Nickname string `json:"nickname"`
	Avatar   string `json:"avatar"`
	Content  string `json:"content"`
}

func (q *Queries) CreateCritique(ctx context.Context, arg *CreateCritiqueParams) (Critique, error) {
	row := q.db.QueryRowContext(ctx, createCritique,
		arg.OwnerID,
		arg.ParentID,
		arg.Nickname,
		arg.Avatar,
		arg.Content,
	)
	var i Critique
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ParentID,
		&i.Nickname,
		&i.Avatar,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getChildCritiques = `-- name: GetChildCritiques :many
SELECT id, owner_id, parent_id, nickname, avatar, content, created_at FROM critiques
WHERE parent_id = $1
`

func (q *Queries) GetChildCritiques(ctx context.Context, parentID int64) ([]Critique, error) {
	rows, err := q.db.QueryContext(ctx, getChildCritiques, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Critique{}
	for rows.Next() {
		var i Critique
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ParentID,
			&i.Nickname,
			&i.Avatar,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCritiques = `-- name: GetCritiques :many
SELECT id, owner_id, parent_id, nickname, avatar, content, created_at FROM critiques
WHERE owner_id = $1 AND parent_id = 0
`

func (q *Queries) GetCritiques(ctx context.Context, ownerID int64) ([]Critique, error) {
	rows, err := q.db.QueryContext(ctx, getCritiques, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Critique{}
	for rows.Next() {
		var i Critique
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ParentID,
			&i.Nickname,
			&i.Avatar,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
