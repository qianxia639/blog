// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blog.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countArticle = `-- name: CountArticle :one
SELECT COUNT(*) FROM blogs
`

func (q *Queries) CountArticle(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countArticle)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM blogs
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT b.id, b.owner_id, b.title, b.content, b.image, b.views, b.is_reward, b.is_critique, b.created_at, b.updated_at, u.nickname, u.avatar FROM blogs b
JOIN users u
ON b.owner_id = u.id
WHERE b.id = $1 LIMIT 1
`

type GetArticleRow struct {
	ID         int64     `json:"id"`
	OwnerID    int64     `json:"owner_id"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Image      string    `json:"image"`
	Views      int32     `json:"views"`
	IsReward   bool      `json:"is_reward"`
	IsCritique bool      `json:"is_critique"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Nickname   string    `json:"nickname"`
	Avatar     string    `json:"avatar"`
}

func (q *Queries) GetArticle(ctx context.Context, id int64) (GetArticleRow, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i GetArticleRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Content,
		&i.Image,
		&i.Views,
		&i.IsReward,
		&i.IsCritique,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nickname,
		&i.Avatar,
	)
	return i, err
}

const incrViews = `-- name: IncrViews :exec
UPDATE blogs
SET
    views = views + 1
WHERE id = $1
`

func (q *Queries) IncrViews(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, incrViews, id)
	return err
}

const insertArticle = `-- name: InsertArticle :one
INSERT INTO blogs (
    owner_id, title, content, image, is_reward, is_critique, created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, owner_id, title, content, image, views, is_reward, is_critique, created_at, updated_at
`

type InsertArticleParams struct {
	OwnerID    int64     `json:"owner_id"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Image      string    `json:"image"`
	IsReward   bool      `json:"is_reward"`
	IsCritique bool      `json:"is_critique"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) InsertArticle(ctx context.Context, arg *InsertArticleParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, insertArticle,
		arg.OwnerID,
		arg.Title,
		arg.Content,
		arg.Image,
		arg.IsReward,
		arg.IsCritique,
		arg.CreatedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Content,
		&i.Image,
		&i.Views,
		&i.IsReward,
		&i.IsCritique,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT b.id, b.owner_id, b.title, b.content, b.image, b.views, b.is_reward, b.is_critique, b.created_at, b.updated_at, u.nickname, u.avatar FROM blogs b
JOIN users u 
ON b.owner_id = u.id
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListArticlesRow struct {
	ID         int64     `json:"id"`
	OwnerID    int64     `json:"owner_id"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Image      string    `json:"image"`
	Views      int32     `json:"views"`
	IsReward   bool      `json:"is_reward"`
	IsCritique bool      `json:"is_critique"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Nickname   string    `json:"nickname"`
	Avatar     string    `json:"avatar"`
}

func (q *Queries) ListArticles(ctx context.Context, arg *ListArticlesParams) ([]ListArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListArticlesRow{}
	for rows.Next() {
		var i ListArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.Views,
			&i.IsReward,
			&i.IsCritique,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nickname,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchArticle = `-- name: SearchArticle :many
SELECT b.id, b.owner_id, b.title, b.content, b.image, b.views, b.is_reward, b.is_critique, b.created_at, b.updated_at, u.nickname, u.avatar FROM blogs b 
JOIN users u ON b.owner_id = u.id
WHERE title LIKE $1
LIMIT $2
OFFSET $3
`

type SearchArticleParams struct {
	Title  string `json:"title"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchArticleRow struct {
	ID         int64     `json:"id"`
	OwnerID    int64     `json:"owner_id"`
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Image      string    `json:"image"`
	Views      int32     `json:"views"`
	IsReward   bool      `json:"is_reward"`
	IsCritique bool      `json:"is_critique"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Nickname   string    `json:"nickname"`
	Avatar     string    `json:"avatar"`
}

func (q *Queries) SearchArticle(ctx context.Context, arg *SearchArticleParams) ([]SearchArticleRow, error) {
	rows, err := q.db.QueryContext(ctx, searchArticle, arg.Title, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchArticleRow{}
	for rows.Next() {
		var i SearchArticleRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Title,
			&i.Content,
			&i.Image,
			&i.Views,
			&i.IsReward,
			&i.IsCritique,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Nickname,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE blogs
SET
    title = COALESCE($1, title),
    content = COALESCE($2, content),
    image = COALESCE($3, image),
    updated_at = $4
WHERE 
    id = $5
RETURNING id, owner_id, title, content, image, views, is_reward, is_critique, created_at, updated_at
`

type UpdateArticleParams struct {
	Title     sql.NullString `json:"title"`
	Content   sql.NullString `json:"content"`
	Image     sql.NullString `json:"image"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg *UpdateArticleParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, updateArticle,
		arg.Title,
		arg.Content,
		arg.Image,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Content,
		&i.Image,
		&i.Views,
		&i.IsReward,
		&i.IsCritique,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
