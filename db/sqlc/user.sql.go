// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username, email, nickname, password
) VALUES(
    $1, $2, $3, $4
)
RETURNING id, username, email, nickname, password, avatar, register_time
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Nickname string `json:"nickname"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Nickname,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Nickname,
		&i.Password,
		&i.Avatar,
		&i.RegisterTime,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, nickname, password, avatar, register_time FROM users
WHERE username = $1
OR email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Nickname,
		&i.Password,
		&i.Avatar,
		&i.RegisterTime,
	)
	return i, err
}
